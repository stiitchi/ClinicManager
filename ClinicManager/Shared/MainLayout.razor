@using Blazored.LocalStorage
@using ClinicManager.Data.Manager.Modals
@using ClinicManager.Service
@using ClinicManager.Shared.DTO_s.Auth
@using ClinicManager.Shared.DTO_s.Faults
@using ClinicManager.Theme
@using ClinicManager.Web.Infrastructure.Services.Authentication
@using MudBlazor.ThemeManager
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService _localStorage
@inject IAuthenticationService authenticationService

<MudThemeProvider Theme="_themeManager.Theme"  />
<MudDialogProvider />
<MudSnackbarProvider />
<AuthorizeView>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="d-flex align-center">
                     <MudMainContent>                         
                                  @Body     
                    </MudMainContent>
        </MudContainer>
    </NotAuthorized>

<Authorized>
<MudLayout>
    <MudAppBar Color="Color.Info" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Class="mr-3" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <img src="/medops logo.png" width="130" height="60"> 
        <MudSpacer />
      <MudDivider Vertical="true" FlexItem="true" /> 
              
                    @if (string.IsNullOrEmpty(_stateService.GetUser().ImageUrl))
                    {
                     <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomRight">
                        <ActivatorContent>
                            <MudAvatar Color="Color.Secondary">@_stateService.GetUser().FirstName.ElementAt(0)@_stateService.GetUser().LastName.ElementAt(0)</MudAvatar> 
                       </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem  OnClick="Account">Account</MudMenuItem>
                            <MudMenuItem  OnClick="LogFault">Log Fault</MudMenuItem>
                             <MudMenuItem  OnClick="LogoutUser">Log Out</MudMenuItem>
                        </ChildContent>
                     </MudMenu>   
                    }
                    else
                    {
                      <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomRight">
                        <ActivatorContent>
                     <MudAvatar Class="avatar-icon" Style="margin-left:10px;" Image="@_stateService.GetUser().ImageUrl"></MudAvatar>
                      </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem  OnClick="Account">Account</MudMenuItem>
                            <MudMenuItem  OnClick="LogFault">Log Fault</MudMenuItem>
                            <MudMenuItem  OnClick="LogoutUser">Log Out</MudMenuItem>
                        </ChildContent>
                     </MudMenu>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" >
                        <MudList>
                        <MudListItem>
                        <MudText Style="color:black;" Typo="Typo.body2">@_stateService.GetUser().FullName</MudText>
                        <MudText Style="color:black;" Typo="Typo.caption">@_stateService.GetActiveUserRole().Role</MudText>
                        </MudListItem>
                        </MudList>
                    </MudHidden>
                    } 
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        @Body
    </MudContainer>
    </MudMainContent>
    </MudLayout>
    </Authorized>
</AuthorizeView>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    public async Task LogoutUser()
    {
        await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOutAsync();     
        _navigationManager.NavigateTo("login");
    }

    public async Task Account()
    {
        _navigationManager.NavigateTo("account");
    }

    public async Task LogFault()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(FaultLoggerModal.FaultModel), new FaultsDTO { });
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, };
        _dialogService.Show<FaultLoggerModal>("Log a Fault", parameters, options);
    }


    private ThemeManagerTheme _themeManager = new ThemeManagerTheme
    {
        Theme = new MudBlazorTheme(),
        DrawerClipMode = DrawerClipMode.Always,
        FontFamily = "Montserrat",
        DefaultBorderRadius = 6,
        AppBarElevation = 1,
        DrawerElevation = 1,
    };
}