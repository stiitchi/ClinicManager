@page "/all-ward-rooms/{WardId:int}"
@using ClinicManager.Data.Modals.Beds
@using ClinicManager.Data.Modals.Misc
@using ClinicManager.Data.Modals.Room
@using ClinicManager.Web.Infrastructure.Services.Room
@using ClinicManager.Web.Infrastructure.Services.Ward
@using Modals
@using ClinicManager.Shared.DTO_s
@inject IRoomService roomService 
@inject IWardService wardService 
@attribute [Authorize]

   <MudGrid Class="mt-8">
        <MudItem xs="12" md="12" sm="12">
            <MudText Align="Align.Center" Typo="Typo.h5">
                Ward @WardId - Rooms
            </MudText>
        </MudItem>
          <MudItem xs="12" md="6" sm="6">
            <MudButton Color="Color.Info" OnClick="(() => InvokeModal())" Class="mt-3 mb-3" Style="border-radius:10px 10px 10px 10px"
                       Variant="Variant.Outlined">New Room</MudButton>
        </MudItem>

            <MudItem xs="12" md="6" sm="6">
                <MudIconButton Color="Color.Warning" OnClick="SetViewTable"
                               Icon="@Icons.Material.Filled.TableBar"></MudIconButton>
                <MudIconButton Color="Color.Secondary" OnClick="SetViewGrid"
                               Icon="@Icons.Material.Filled.GridView"></MudIconButton>
            </MudItem>
        @if (!isTableView)
        {
            @foreach (var room in _rooms)
            {
                <MudItem xs="12" md="3" sm="3">
                    <MudCard Elevation="5" Style="border-radius:10px 10px 10px 10px">
                        <MudCardContent>
                            <MudText Align="Align.Center" Typo="Typo.h6"> Room @room.RoomNumber</MudText>
                        </MudCardContent>
                        <MudCardContent>
                            <center>
                                <MudText Align="Align.Center" Typo="Typo.body1">Ward @room.WardId</MudText>
                            </center>
                        </MudCardContent>
                        <MudCardContent>
                            <center>
                                <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Info" Icon="@Icons.Material.TwoTone.Preview" />
                            </center>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
    @if (isTableView)
    {
    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Items="@_rooms"  Elevation="25" ServerData="@(new Func<TableState, Task<TableData<RoomDTO>>>(ServerReload))" Dense="true" Bordered="false" Striped="true" Filter="new Func<RoomDTO, bool>(Search)" @ref="_table">
            <ToolBarContent>
        <div class="justify-center mud-text-align-center">
            <MudButton DisableElevation Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
        </div>
        <MudSpacer />
            <MudTextField Label="Search Rooms" @bind-Value="SearchField" Variant="Variant.Outlined" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="RoomDTO" SortLabel="RoomNumber">Room Number</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="RoomDTO" SortLabel="WardId">Ward Number</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="BedNumber">
            <MudHighlighter Text="@context.RoomNumber.ToString()" HighlightedText="@_searchString" />
        </MudTd>
         <MudTd DataLabel="WardId">
            <MudHighlighter Text="@context.WardId.ToString()" HighlightedText="@_searchString" />
        </MudTd>   
        <MudTd  Style="width:200px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
         <MudButton Class="pa-1 mx-1" Color="Color.Info" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:200px" @onclick="@(() => _navigationManager.NavigateTo($"/all-room-beds/{@context.RoomId}"))">View Beds</MudButton>
       </MudTd>
        <MudTd  Style="width:200px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
         <MudButton Class="pa-1 mx-1" Color="Color.Transparent" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:200px" @onclick="@(() => InvokeModal(@context.RoomId))">Edit</MudButton>
       </MudTd>
       <MudTd  Style="width:200px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
         <MudButton Class="pa-1 mx-1" Color="Color.Error" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:200px" @onclick="@(() => Delete(@context.RoomId, @context.WardId))">Delete</MudButton>
       </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Rows" />
    </PagerContent>
    </MudTable>
    }

@code{
    [Parameter] public int WardId { get; set; } 

    DateTime? date = DateTime.Today;
    public string SearchField;
    private List<RoomDTO> _rooms = new();
    public bool isTableView = true;
    private RoomDTO room = new();
    private MudTable<RoomDTO> _table;
    private int _totalItems;
    private int _currentPage;
    private TableState _state;
    private string _searchString = "";
    protected async override Task OnInitializedAsync()
    {
        await GetAllRoomsByWardId(WardId);
    }

    public async Task GetAllRoomsByWardId(int wardId)
    {
        //var rooms = await roomService.GetAllRoomsByWardId(wardId);
        //if (rooms.Succeeded)
        //{
        //    _rooms = rooms.Data;
        //}
    }

    public void SetViewGrid()
    {
        isTableView = false;
    }
    public void SetViewTable()
    {
        isTableView = true;
    }

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            room = _rooms.FirstOrDefault(c => c.RoomId == id);
            if (room != null)
            {
                parameters.Add(nameof(AddEditRoom.AddEditRoomModel), new RoomDTO
                {
                WardId = room.WardId,
                TotalBeds = room.TotalBeds,
                RoomId = room.RoomId,
                RoomNumber = room.RoomNumber
                });
            }
        }
        else{
                parameters.Add(nameof(AddEditRoom.AddEditRoomModel), new RoomDTO
                {
                WardId = WardId
                });
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditRoom>(id == 0 ? "Create Room" : "Edit Room", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _table.ReloadServerData();
        }
    }
    private bool Search(RoomDTO room) => FilterFunc(room, _searchString);

    private bool FilterFunc(RoomDTO room, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (room.RoomNumber?.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    private async Task GetRoomsAsync(TableState state)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            orderings = state.SortDirection != SortDirection.None ? new[] { $"{state.SortLabel} {state.SortDirection}" } : new[] { $"{state.SortLabel}" };
        }

        var response = await roomService.GetAllRoomsByWardIdTable(state.Page + 1, state.PageSize, _searchString, WardId,  orderings);
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _rooms = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private async Task<TableData<RoomDTO>> ServerReload(TableState state)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            state.Page = 0;
        }
        _state = state;
        await GetRoomsAsync(state);
        return new TableData<RoomDTO> { TotalItems = _totalItems, Items = _rooms };
    }

        private async Task Delete(int id, int wardId)
    {
        string deleteContent = $"Delete Room {_rooms.FirstOrDefault(c => c.RoomId == id).RoomNumber}";
        var parameters = new DialogParameters
        {
            {nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await roomService.DeleteAsync(id, wardId);
            if (response.Succeeded)
            {
                await _table.ReloadServerData();
                _snackBar.Add("Room Deleted", Severity.Success);
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }
}
