@using Blazored.FluentValidation
@using ClinicManager.Shared.DTO_s.Charts
@using ClinicManager.Shared.DTO_s.Charts.ChartEntry
@using ClinicManager.Shared.Wrappers
@using ClinicManager.Web.Infrastructure.Services.Chart
@using ClinicManager.Shared.DTO_s
@inject IChartService chartService 


<EditForm Model="@AddBloodPressureChartModel" OnValidSubmit="SaveAsync">
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
               Blood Pressure Chart
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="5">
                    <MudTextField T="double" For="@(() => AddBloodPressureChartModel.BloodPressureChartEntry)" @bind-Value="AddBloodPressureChartModel.BloodPressureChartEntry" Label="Chart Entry" />
                </MudItem>
                <MudItem xs="7">
                    <center>
                    <MudButton Style="border-radius: 15px 15px;" Variant="Variant.Outlined" Class="mt-3" Disabled="chartDrawn" Color="Color.Info" @onclick="@(() => AddToChart(AddBloodPressureChartModel.BloodPressureChartEntry))">Add Value</MudButton>
                    </center>
                </MudItem>
                    @if(ChartValues.Count() > 0)
                    {
                        <MudGrid>
                        @foreach(var item in ChartValues)
                        {
                            <MudItem xs="2">
                                <MudCard Elevation="4">
                                    <MudCardContent>
                                        <MudText Align="Align.Center">@item</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                        </MudGrid>
                    }                   

                <MudItem xs="12">
                    @if(chartDrawn == true)
                    {
                    <MudChart ChartType="ChartType.Line"  ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
                    }
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
        <MudButton Style="border-radius: 15px 15px;" DisableElevation Variant="Variant.Outlined" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton Style="border-radius: 15px 15px;" DisableElevation Variant="Variant.Outlined" Color="Color.Info" Disabled="@(isDisabled || chartDrawn)"  OnClick="DrawChart">Draw Chart</MudButton>
        <MudButton Style="border-radius: 15px 15px;" DisableElevation Variant="Variant.Outlined" ButtonType="ButtonType.Submit" 
        Disabled="@(_processing || CanSave)"  Color="Color.Success">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else    
            {
                <MudText>Save Chart</MudText>
            }
        </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public BloodPressureDTO AddBloodPressureChartModel { get; set; } = new();
    [Parameter] public int PatientId { get; set; } 
    private bool _processing = false;
    private bool chartDrawn = false;
    private bool isDisabled = true;
    private bool CanSave = true;
    double[] Data = {};
    public List<double> ChartValues = new List<double>();
    public BloodPressureChartEntryDTO BloodPressureChartEntryModel { get; set; } = new();

    private int Index = -1; 

    public List<ChartSeries> Series = new List<ChartSeries>(){};

    public string[] XAxisLabels = {"08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" };

    public void Cancel()
    {
        MudDialog.Cancel();
    }

    public void AddToChart(double chartEntry)
    {
        if (chartEntry < 35 || chartEntry > 250)
        {
            _snackBar.Add("Entry cannot be less than 35 or more than 250", Severity.Error);
        }
        else
        {
            for (int records = 0; records < 1; records++)
            {
                ChartValues.Add(chartEntry);
            }
            double[] Data = ChartValues.ToArray();
            isDisabled = false;
        }
    }

    public void DrawChart()
    {
        double[] Data = ChartValues.ToArray();       
        Series.Add(new ChartSeries() { Name = "Blood Pressure", Data = Data });
        chartDrawn = true;
        CanSave = false;
    }

    private async Task SaveAsync()
    {
        _processing = true;
        IResult<int> response;
        AddBloodPressureChartModel.Time = "";
        if (AddBloodPressureChartModel.BloodPressureChartId == 0)
            response = await chartService.AddBloodPressureChart(AddBloodPressureChartModel);
        else
            response = await chartService.AddBloodPressureChart(AddBloodPressureChartModel);

        if (response.Succeeded)
        {
            foreach(var entry in ChartValues)
            {
            var id = response.Data;
            _processing = true;
            IResult<int> resp;
            BloodPressureChartEntryModel.BloodPressureChartEntry = entry;          
            BloodPressureChartEntryModel.BloodPressureChartId = id;          
            resp = await chartService.AddBloodPressureChartEntry(BloodPressureChartEntryModel);
            }

            _snackBar.Add("Blood Pressure Chart Saved", Severity.Success);
            _processing = false;
            
            MudDialog.Close();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }   
}