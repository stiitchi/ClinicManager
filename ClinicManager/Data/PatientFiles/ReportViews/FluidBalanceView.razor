@page "/fluid-balance-view/{PatientId:int}"
@using ClinicManager.Shared.DTO_s.Records
@using ClinicManager.Shared.DTO_s.Records.FluidBalance
@using ClinicManager.Shared.Wrappers
@using ClinicManager.Web.Infrastructure.Services.PatientRecords
@inject IPatientRecordService patientRecordService 

<MudGrid>
    <MudItem xs="12" md="12" sm="12">
        <MudText Align="Align.Center" Typo="Typo.h6">
            Fluid Balance Views
        </MudText>
    </MudItem>
    <MudItem xs="12" md="12" sm="12">
      <MudButton Variant="Variant.Outlined" Color="Color.Info"
                               Style="border-radius:10px 10px 10px 10px"
                               @onclick="@(() => _navigationManager.NavigateTo($"/patient-view/{PatientId}"))">Back</MudButton>
    </MudItem> 
       <MudItem md="6" sm="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderActions>
                          <MudButton Variant="Variant.Outlined" Color="Color.Info" @onclick="@(() => _navigationManager.NavigateTo($"/oral-input-reports/{PatientId}"))"
                               Style="border-radius:10px 10px 10px 10px">View</MudButton>
                </CardHeaderActions>
                <CardHeaderContent>
                <MudText>Oral Input Reports</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>
    <MudItem md="6" sm="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderActions>
                          <MudButton Variant="Variant.Outlined" Color="Color.Info" @onclick="@(() => _navigationManager.NavigateTo($"/oral-output-reports/{PatientId}"))"
                               Style="border-radius:10px 10px 10px 10px">View</MudButton>
                </CardHeaderActions>
                <CardHeaderContent>
                <MudText>Oral Output Reports</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>
     <MudItem md="6" sm="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderActions>
                          <MudButton Variant="Variant.Outlined" Color="Color.Info" @onclick="@(() => _navigationManager.NavigateTo($"/iv-reports/{PatientId}"))"
                               Style="border-radius:10px 10px 10px 10px">View</MudButton>
                </CardHeaderActions>
                <CardHeaderContent>
                <MudText>IV Test Reports</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>
    <MudItem md="6" sm="6">
        <MudCard>
            <MudCardHeader>
                <CardHeaderActions>
                          <MudButton Variant="Variant.Outlined" Color="Color.Info" @onclick="@(() => _navigationManager.NavigateTo($"/intake-reports/{PatientId}"))"
                               Style="border-radius:10px 10px 10px 10px">View</MudButton>
                </CardHeaderActions>
                <CardHeaderContent>
                <MudText>24 Hour Reports</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<FluidBalanceIVCheckDTO> _ivReports = new();
    private List<OralIntakeDTO> _oralInputReports = new();
    private List<OralOutputDTO> _oralOutputReports = new();
    private List<Previous24HourIntakeDTO> _24HourReports = new();

    [Parameter] public int PatientId { get; set; } 

    protected async override Task OnInitializedAsync()
    {
        await GetAllIVTestReports(PatientId);
        await GetAllOralIntakeReports(PatientId);
        await GetAllOralOutputReports(PatientId);
        await GetAllOral24HourReports(PatientId);
    }

    public async Task GetAllIVTestReports(int patientId)
    {
        var reports = await patientRecordService.GetAllIVCheckByPatientId(patientId);
        if (reports.Succeeded)
        {
            _ivReports = reports.Data;
        }
    }  
    public async Task GetAllOralIntakeReports(int patientId)
    {
        var reports = await patientRecordService.GetAllOralIntakeChecksByPatientId(patientId);
        if (reports.Succeeded)
        {
            _oralInputReports = reports.Data;
        }
    }
    public async Task GetAllOralOutputReports(int patientId)
    {
        var reports = await patientRecordService.GetAllOralOutputChecksByPatientId(patientId);
        if (reports.Succeeded)
        {
            _oralOutputReports = reports.Data;
        }
    }
     public async Task GetAllOral24HourReports(int patientId)
    {
        var reports = await patientRecordService.GetAll24HourIntakesByPatientId(patientId);
        if (reports.Succeeded)
        {
            _24HourReports = reports.Data;
        }
    }
}