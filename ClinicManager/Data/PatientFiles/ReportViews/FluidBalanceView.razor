@page "/fluid-balance-view/{PatientId:int}"
@using ClinicManager.Shared.DTO_s.Records
@using ClinicManager.Shared.DTO_s.Records.FluidBalance
@using ClinicManager.Shared.Wrappers
@using ClinicManager.Web.Infrastructure.Services.PatientRecords
@inject IPatientRecordService patientRecordService 

<MudGrid>
    <MudItem xs="12" md="12" sm="12">
        <MudText Align="Align.Center" Typo="Typo.h6">
            Fluid Balance Views
        </MudText>
    </MudItem>
    <MudItem xs="12" md="12" sm="12">
      <MudButton Variant="Variant.Outlined" Color="Color.Info"
                               Style="border-radius:10px 10px 10px 10px"
                               @onclick="@(() => _navigationManager.NavigateTo($"/patient-view/{PatientId}"))">Back</MudButton>
    </MudItem>
    @foreach(var report in _ivReports)
    { 
    <MudItem md="3" sm="6">
        <MudCard Style="height:100%">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Info">@report.IVTestId</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Align="Align.Center" Typo="Typo.inherit">
                        IV Test Report
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                Check Type: <MudChip Class="mr-2">@report.intravenousCheckType</MudChip> <br/>
                Intake Time: <MudChip Class="mr-2">@report.intravenousIntakeTime.ToString("HH:mm")</MudChip> <br/>
                Completed Time: <MudChip Class="mr-2">@report.intravenousIntakeTimeCompleted.ToString("HH:mm")</MudChip> <br/>
                Start Volume: @report.intravenousStartVolume <br/>
                Complete Volume: @report.intravenousCompleteVolume <br/>
                Running Total: @report.intravenousRunningTotal <br/>
                Description : @report.intravenousDesc
            </MudCardContent>
        </MudCard>
    </MudItem>
    }
    @foreach(var report in _oralInputReports)
    { 
    <MudItem md="3" sm="6">
        <MudCard Style="height:100%">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Info">@report.OralIntakeTestId</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    @report.OralCheckType
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
               Total ML: @report.OralIntakeMl <br/> 
               Total Volume: @report.OralIntakeVolume <br/>
               Running Total: @report.RunningIntakeTotal <br/>
               Time: <MudChip>@report.OralIntakeTime.ToString("HH:mm")</MudChip> 
            </MudCardContent>
        </MudCard>
    </MudItem>
    }
    @foreach(var report in _oralOutputReports)
    { 
    <MudItem md="3" sm="6">
        <MudCard Style="height:100%">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Info">@report.OralOutputTestId</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Align="Align.Center" Typo="Typo.inherit">
                        Oral Output Report
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
               Total ML: @report.OralOutputMl <br/>
                @if(report.IsUrine == true)
                {
                <MudText Typo="Typo.inherit">Is Urine: Yes</MudText> <br/>
                }
                else
                {
                <MudText Typo="Typo.inherit">Is Urine: No</MudText> <br/>
                }
               Running Total: @report.RunningOutputTotal <br/>
               Time: <MudChip>@report.OralOutputTime.ToString("HH:mm")</MudChip> 
            </MudCardContent>
        </MudCard>
    </MudItem>
    }
    @foreach(var report in _24HourReports)
    { 
    <MudItem md="3" sm="6">
        <MudCard Style="height:100%">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Info">@report.TotalIntakeId</MudAvatar>
                </CardHeaderAvatar>
            </MudCardHeader>
            <MudCardContent>
               Intake 24 Hour: @report.Intake24Hour <br/>         
               Output 24 Hour: @report.Output24Hour <br/>
               Overall Total:  @report.TotalIntake  <br/>
              <MudChip>@report.DateToday.ToString("MMMM:dd")</MudChip>
            </MudCardContent>
        </MudCard>
    </MudItem>
    }
</MudGrid>

@code {
    private List<FluidBalanceIVCheckDTO> _ivReports = new();
    private List<OralIntakeDTO> _oralInputReports = new();
    private List<OralOutputDTO> _oralOutputReports = new();
    private List<Previous24HourIntakeDTO> _24HourReports = new();

    [Parameter] public int PatientId { get; set; } 

    protected async override Task OnInitializedAsync()
    {
        await GetAllIVTestReports(PatientId);
        await GetAllOralIntakeReports(PatientId);
        await GetAllOralOutputReports(PatientId);
        await GetAllOral24HourReports(PatientId);
    }

    public async Task GetAllIVTestReports(int patientId)
    {
        var reports = await patientRecordService.GetAllIVCheckByPatientId(patientId);
        if (reports.Succeeded)
        {
            _ivReports = reports.Data;
        }
    }  
    public async Task GetAllOralIntakeReports(int patientId)
    {
        var reports = await patientRecordService.GetAllOralIntakeChecksByPatientId(patientId);
        if (reports.Succeeded)
        {
            _oralInputReports = reports.Data;
        }
    }
    public async Task GetAllOralOutputReports(int patientId)
    {
        var reports = await patientRecordService.GetAllOralOutputChecksByPatientId(patientId);
        if (reports.Succeeded)
        {
            _oralOutputReports = reports.Data;
        }
    }
     public async Task GetAllOral24HourReports(int patientId)
    {
        var reports = await patientRecordService.GetAll24HourIntakesByPatientId(patientId);
        if (reports.Succeeded)
        {
            _24HourReports = reports.Data;
        }
    }
}