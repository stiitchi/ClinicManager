@page "/all-unoccupied-beds/{RoomId:int}/{RoomNumber}"
@using ClinicManager.Data.Modals.Beds
@using ClinicManager.Data.Modals.Misc
@using ClinicManager.Web.Infrastructure.Services.Bed
@using Modals
@using ClinicManager.Shared.DTO_s
@inject IBedService bedService 
@attribute [Authorize]

    <MudGrid Class="mt-8">
        <MudItem xs="12" md="12" sm="12">
            <MudText Align="Align.Center" Typo="Typo.h5">
                Room @RoomNumber - Beds
            </MudText>
        </MudItem>
        <MudItem xs="12" md="4" sm="4">
            <MudButton Color="Color.Info" OnClick="(() => InvokeModal())" Class="mt-3 mb-3" Style="border-radius:10px 10px 10px 10px"
                       Variant="Variant.Outlined">New Bed</MudButton>
        </MudItem>
            <MudItem xs="12" md="4" sm="4">
                        <MudButton Color="Color.Transparent" OnClick="@(() => _navigationManager.NavigateTo($"/all-room-beds/{RoomId}/{RoomNumber}"))" Class="mt-3 mb-3" Style="border-radius:10px 10px 10px 10px"
                       Variant="Variant.Outlined">All</MudButton>
                        <MudButton Color="Color.Success" OnClick="@(() => _navigationManager.NavigateTo($"/all-unoccupied-beds/{RoomId}/{RoomNumber}"))" Class="mt-3 mb-3" Style="border-radius:10px 10px 10px 10px"
                       Variant="Variant.Outlined">Unoccupied</MudButton>
                        <MudButton Color="Color.Error" OnClick="@(() => _navigationManager.NavigateTo($"/all-occupied-beds/{RoomId}/{RoomNumber}"))" Class="mt-3 mb-3" Style="border-radius:10px 10px 10px 10px"
                       Variant="Variant.Outlined">Occupied</MudButton>
            </MudItem>
            <MudItem xs="12" md="4" sm="4">
                <MudIconButton Color="Color.Warning" OnClick="SetViewTable"
                               Icon="@Icons.Material.Filled.TableBar"></MudIconButton>
                <MudIconButton Color="Color.Secondary" OnClick="SetViewGrid"
                               Icon="@Icons.Material.Filled.GridView"></MudIconButton>
            </MudItem>
        @if (!isTableView)
        {
            @foreach (var bed in _unOccupiedBeds)
            {
            <MudItem md="3" sm="6">
                <MudCard Elevation="5" Style="height:150px">
                    <MudCardHeader>
                        <CardHeaderContent>
                        <MudButton Color="Color.Warning" @onclick="@(() => InvokeModal(bed.BedId))" Variant="Variant.Outlined">Edit</MudButton>
                        <MudButton Color="Color.Error" @onclick="@(() => Delete(bed.BedId, bed.RoomId.Value))" Variant="Variant.Outlined">Delete</MudButton>
                        </CardHeaderContent>
                        <CardHeaderActions>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Align="Align.Center" Typo="Typo.h6">Bed @bed.BedNumber</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            }
        }
    </MudGrid>
    @if (isTableView)
    {
        <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Items="@_unOccupiedBeds"  Elevation="25" ServerData="@(new Func<TableState, Task<TableData<BedDTO>>>(ServerReloadUnoccupied))" Dense="true" Bordered="false" Striped="true" Filter="new Func<BedDTO, bool>(SearchUnoccupied)" @ref="_tableUnoccupied">
                <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                <MudButton DisableElevation Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
            </div>
            <MudSpacer />
                <MudTextField Label="Search Beds" @bind-Value="SearchField" Variant="Variant.Outlined" Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel T="BedDTO" SortLabel="BedNumber">Bed Number</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="BedDTO" SortLabel="IsOccupied">Active Status</MudTableSortLabel></MudTh>
            </HeaderContent>
             <RowTemplate>
            <MudTd DataLabel="Bed Number">
                <MudHighlighter Text="@context.BedNumber.ToString()" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Active Status">
            @if(context.IsOccupied == true)
                {
                <MudHighlighter Text="Occupied" HighlightedText="@_searchString" />
                }
            else
                {
                <MudHighlighter Text="Not Occupied" HighlightedText="@_searchString" />
                }
            </MudTd>
            <MudTd  Style="width:200px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
             <MudButton Class="pa-1 mx-1" Color="Color.Transparent" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:150px" @onclick="@(() => InvokeModal(@context.BedId))">Edit</MudButton>
           </MudTd>
           <MudTd  Style="width:200px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
             <MudButton Class="pa-1 mx-1" Color="Color.Error" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:150px" @onclick="@(() => Delete(@context.BedId, RoomId))">Delete</MudButton>
           </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Rows" />
        </PagerContent>
        </MudTable>
    }

@code{
    [Parameter] public int RoomId { get; set; } 
    [Parameter] public string RoomNumber { get; set; } 

    DateTime? date = DateTime.Today;
    public string SearchField;
    private List<BedDTO> _unOccupiedBeds = new();
    public bool isTableView = true;
    private BedDTO bed = new();
    private MudTable<BedDTO> _tableUnoccupied;
    private int _totalItems;
    private int _currentPage;
    private TableState _state;
    private string _searchString = "";

    protected async override Task OnInitializedAsync()
    {
        await GetAllUnoccupiedBedsByRoomId(RoomId);
    }

    public void SetViewGrid()
    {
        isTableView = false;
    }
    public void SetViewTable()
    {
        isTableView = true;
    }

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            bed = _unOccupiedBeds.FirstOrDefault(c => c.BedId == id);
            if (bed != null)
            {
                parameters.Add(nameof(AddEditBed.AddEditBedModel), new BedDTO
                {
                BedId = bed.BedId,
                BedNumber = bed.BedNumber,
                RoomId = bed.RoomId,
                RoomNumber = bed.RoomNumber
                });
            }

        }
        else
        {
            parameters.Add(nameof(AddEditBed.AddEditBedModel), new BedDTO
                {
                RoomId = RoomId
                });
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<AddEditBed>(id == 0 ? "Create Bed" : "Edit Bed", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _tableUnoccupied.ReloadServerData();
        }
    }
    private async Task Delete(int id, int roomId)
    {
        string deleteContent = $"Delete Bed {_unOccupiedBeds.FirstOrDefault(c => c.BedId == id).BedNumber}";
        var parameters = new DialogParameters
        {
            {nameof(DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<DeleteConfirmation>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await bedService.DeleteAsync(id,roomId);
            if (response.Succeeded)
            {
                await _tableUnoccupied.ReloadServerData();
                _snackBar.Add("Bed Deleted", Severity.Success);
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _tableUnoccupied.ReloadServerData();
    }

    public async Task GetAllUnoccupiedBedsByRoomId(int roomId)
    {
        var unOccupiedBeds = await bedService.GetAllUnoccupiedBedsByRoomId(roomId);
        if (unOccupiedBeds.Succeeded)
        {
            _unOccupiedBeds = unOccupiedBeds.Data;
        }
    }

    private bool SearchUnoccupied(BedDTO bed) => FilterFuncUnoccupied(bed, _searchString);

    private bool FilterFuncUnoccupied(BedDTO bed, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (bed.BedNumber.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (bed.RoomNumber?.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    private async Task<TableData<BedDTO>> ServerReloadUnoccupied(TableState state)
    {
        if (!string.IsNullOrWhiteSpace(_searchString))
        {
            state.Page = 0;
        }
        _state = state;
        await GetUnoccupiedBedsAsync(state);
        return new TableData<BedDTO> { TotalItems = _totalItems, Items = _unOccupiedBeds };
    }

   private async Task GetUnoccupiedBedsAsync(TableState state)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            orderings = state.SortDirection != SortDirection.None ? new[] { $"{state.SortLabel} {state.SortDirection}" } : new[] { $"{state.SortLabel}" };
        }

        var response = await bedService.GetAllUnOccupiedBedsTable(state.Page + 1, state.PageSize, _searchString, RoomId, orderings);
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _unOccupiedBeds = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }   
}
