@page "/patients"
@using ClinicManager.Data.Modals.Patient
@using ClinicManager.Web.Infrastructure.Services.Patient
@using ClinicManager.Web.Infrastructure.Services.Bed
@using Modals
@using ClinicManager.Shared.DTO_s
@inject IPatientService patientService 
@inject IBedService bedService 

<MudContainer>
    <MudGrid Class="mt-8">
        <MudItem xs="12" md="12" sm="12">
            <MudText Align="Align.Center" Typo="Typo.h5">
                Patients
            </MudText>
        </MudItem>
        <MudItem xs="12" md="12" sm="12">
@*            <MudTextField Label="Search Patient" @bind-Value="Patient" Variant="Variant.Outlined" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"></MudTextField>*@
            <MudButton Color="Color.Info" Class="mt-3"
                       Style="border-radius:10px 10px 10px 10px" OnClick="AddPatient"
                       Variant="Variant.Outlined">New Patient</MudButton>
        </MudItem>
 @*       <MudItem xs="12" md="3" sm="3">
            <MudDatePicker Variant="Variant.Outlined" Label="Admission From" @bind-Date="date" />
        </MudItem>
        <MudItem xs="12" md="3" sm="3">
            <MudDatePicker Variant="Variant.Outlined" Label="Admission To" @bind-Date="date" />
        </MudItem>*@
        @foreach(var patient in _patients)
        {
        <MudItem xs="12" md="4" sm="4">
            <MudCard Elevation="5" Style="border-radius:10px 10px 10px 10px">
                <MudCardContent>
                    <MudText Align="Align.Center" Typo="Typo.h6">@patient.Title @patient.LastName</MudText>
                </MudCardContent>
                <MudCardContent>
                    <MudText Align="Align.Center" Typo="Typo.body1">@patient.IDNo</MudText>
                </MudCardContent>
                <MudCardContent>
                    <center>
                        <MudChip Size="Size.Large" Color="Color.Info">
                            @patient.AdmissionDate.Value.ToString("MMMM dd")
                        </MudChip>
                        <MudChip Size="Size.Large" Color="Color.Secondary">
                            @patient.DischargeDate.Value.ToShortTimeString()               
                        </MudChip>
                    </center>
                </MudCardContent>
                <MudCardContent>
                    <center>
                   
                        <MudTooltip Text="View Patient">
                            <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Info" Icon="@Icons.Material.TwoTone.AccessibilityNew"
                             @onclick="@(() => _navigationManager.NavigateTo($"/patient-edit/{patient.Id}"))"/>
                        </MudTooltip>                 
                        <MudTooltip Text="Patient Reports">
                            <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Secondary" Icon="@Icons.Material.TwoTone.Book" 
                            @onclick="@(() => _navigationManager.NavigateTo($"/patient-view/{patient.Id}"))"/>
                        </MudTooltip>
                        @* <MudTooltip Text="Discharge Patient">
                            <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Warning" Icon="@Icons.Material.TwoTone.Home" />
                        </MudTooltip>*@
                    </center>
                </MudCardContent>
            </MudCard>
        </MudItem>
        }
    </MudGrid>
</MudContainer>

@code{
    DateTime? date = DateTime.Today;
    DateTime admissionDate;

    public string Patient;
    private List<PatientDTO> _patients = new();
    private PatientDTO patient = new();

    private void AddPatient()
    {
        Random rnd = new Random();
        int accountNo = rnd.Next();
        int caseInformationNo = rnd.Next();
        var parameters = new DialogParameters();
        parameters.Add(nameof(SearchPatientIDNumber.Search), new SearchDTO {});

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, };
        _dialogService.Show<SearchPatientIDNumber>("Search Patient", parameters, options);
    }

    protected async override Task OnInitializedAsync()
    {
        await GetAllPatients();
        admissionDate.ToString("MMMM dd");
    }

    public async Task GetAllPatients()
    {
        var patient = await patientService.GetAll();
        if (patient.Succeeded)
        {
            _patients = patient.Data;
        }
    }
}

