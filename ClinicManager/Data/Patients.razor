@page "/patients"
@using ClinicManager.Data.Modals.Patient
@using ClinicManager.Web.Infrastructure.Services.Patient
@using ClinicManager.Web.Infrastructure.Services.Bed
@using Modals
@using ClinicManager.Shared.DTO_s
@using static ClinicManager.Shared.Constants.Constants
@inject IPatientService patientService 
@inject IBedService bedService
@attribute [Authorize]


    <MudGrid Class="mt-8">
        <MudItem xs="12" md="12" sm="12">
            <MudText Align="Align.Center" Typo="Typo.h5">
                Patients
            </MudText>
        </MudItem>
        <MudItem xs="12" md="6" sm="6">       
            <MudButton Color="Color.Info" Class="mt-3"
                       Style="border-radius:10px 10px 10px 10px" OnClick="AddPatient"
                       Variant="Variant.Outlined">New Patient</MudButton>

            <MudButton Color="Color.Warning" Class="mt-3"
                       Style="border-radius:10px 10px 10px 10px" OnClick="SearchPatient"
                       Variant="Variant.Outlined">Search Patient</MudButton>
        </MudItem>
    
        <MudItem xs="12" md="6" sm="6">
                <MudTooltip Text="Table View">
                    <MudIconButton Color="Color.Warning" OnClick="SetViewTable"
                                    Icon="@Icons.Material.Filled.TableBar"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Grid View">
                    <MudIconButton Color="Color.Secondary" OnClick="SetViewGrid"
                                    Icon="@Icons.Material.Filled.GridView"></MudIconButton>
                </MudTooltip>
        </MudItem>
 @*       <MudItem xs="12" md="3" sm="3">
            <MudDatePicker Variant="Variant.Outlined" Label="Admission From" @bind-Date="date" />
        </MudItem>
        <MudItem xs="12" md="3" sm="3">
            <MudDatePicker Variant="Variant.Outlined" Label="Admission To" @bind-Date="date" />
        </MudItem>*@
 @if (!isTableView)
        {
            @if (_patients != null)
            {
                @foreach (var patient in _patients)
                {
                    <MudItem xs="12" md="4" sm="4">
                        <MudCard Elevation="5" Style="border-radius:10px 10px 10px 10px">
                            <MudCardContent>
                                <MudText Align="Align.Center" Typo="Typo.h6">@patient.Title @patient.LastName</MudText>
                            </MudCardContent>
                            <MudCardContent>
                                <MudText Align="Align.Center" Typo="Typo.body1">@patient.IDNo</MudText>
                            </MudCardContent>
                            <MudCardContent>
                                <center>
                                    <MudChip Size="Size.Large" Color="Color.Info">
                                        @patient.AdmissionDate.Value.ToString("MMMM dd")
                                    </MudChip>
                                    <MudChip Size="Size.Large" Color="Color.Secondary">
                                        @patient.AdmissionDate.Value.ToShortTimeString()               
                                    </MudChip>
                                </center>
                            </MudCardContent>
                            <MudCardContent>
                            <center>
                            @switch(_stateService.GetActiveUserRole().Role)
                            {
                              case "SYSTEM ADMINISTRATOR":
                                _stateService.GetActiveUserRole().Role = RoleConstants.SYSTEM_ADMINISTRATOR;
                                    <MudTooltip Text="View Patient">
                                        <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Info" Icon="@Icons.Material.TwoTone.AccessibilityNew"
                                        @onclick="@(() => _navigationManager.NavigateTo($"/patient-edit/{patient.Id}"))"/>
                                    </MudTooltip>  
                                break;
                              case "SUPER USER":
                                _stateService.GetActiveUserRole().Role = RoleConstants.SUPER_USER;
                                <MudTooltip Text="View Patient">
                                        <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Info" Icon="@Icons.Material.TwoTone.AccessibilityNew"
                                        @onclick="@(() => _navigationManager.NavigateTo($"/patient-edit/{patient.Id}"))"/>
                                </MudTooltip>  
                                break;
                              default:
                                //
                                break;
                            }         
                            <MudTooltip Text="Patient Reports">
                                <MudIconButton Size="Size.Large" Class="mr-1" Color="Color.Secondary" Icon="@Icons.Material.TwoTone.Book" 
                                @onclick="@(() => _navigationManager.NavigateTo($"/patient-view/{patient.Id}"))"/>
                            </MudTooltip>
                                </center>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }

            }

        else
        {
            <MudText Align="Align.Center" Typo="Typo.body1">No Patients Found</MudText>
        }
    }
    </MudGrid>

        @if (isTableView)
        {
        <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Items="@_patients"  Elevation="25" ServerData="@(new Func<TableState, Task<TableData<PatientDTO>>>(ServerReload))" Dense="true" Bordered="false" Striped="true" Filter="new Func<PatientDTO, bool>(Search)" @ref="_table">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                <MudButton DisableElevation Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => OnSearch(""))" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">Reload</MudButton>
            </div>
            <MudSpacer />
          @*      <MudTextField Label="Search Patients" @bind-Value="Patient" Variant="Variant.Outlined" Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info"></MudTextField>*@
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="PatientDTO" SortLabel="FirstName">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="PatientDTO" SortLabel="LastName">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="PatientDTO" SortLabel="IDNo">ID Number</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="PatientDTO" SortLabel="WardNo">Ward Number</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="PatientDTO" SortLabel="BedNo">Bed Number</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="PatientDTO" SortLabel="RefferingDoctor">Doctor</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="First Name">
                <MudHighlighter Text="@context.FirstName.ToString()" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Last Name">
                <MudHighlighter Text="@context.LastName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="IDNo">
                <MudHighlighter Text="@context.IDNo.ToString()" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="IDNo">
                <MudHighlighter Text="@context.WardNo.ToString()" HighlightedText="@_searchString" />
            </MudTd>
             <MudTd DataLabel="IDNo">
                <MudHighlighter Text="@context.BedNo.ToString()" HighlightedText="@_searchString" />
            </MudTd> 
             <MudTd DataLabel="RefferingDoctor">
                <MudHighlighter Text="@context.RefferingDoctor.ToString()" HighlightedText="@_searchString" />
            </MudTd> 
            <MudTd  Style="width:150px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
             <MudButton Class="pa-1 mx-1" Color="Color.Secondary" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:200px"   @onclick="@(() => _navigationManager.NavigateTo($"/patient-view/{@context.Id}"))">Records</MudButton>
            </MudTd> 
            <MudTd  Style="width:150px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
             <MudButton Class="pa-1 mx-1" Color="Color.Info" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:200px"   @onclick="@(() => _navigationManager.NavigateTo($"/patient-edit/{@context.Id}"))">View</MudButton>
            </MudTd> 
            <MudTd  Style="width:150px;  padding-left: 0px;padding-right: 0px;" DataLabel="">
             <MudButton Class="pa-1 mx-1" Color="Color.Transparent" Variant="Variant.Outlined" Style="border-radius: 15px 15px; height:35px; width:200px" @onclick="@(() => InvokeModal(@context.Id))">Edit</MudButton>
            </MudTd> 
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Rows" />
        </PagerContent>
        </MudTable>
        }       


@code{
    DateTime? date = DateTime.Today;
    DateTime admissionDate;

    public string Patient;
    private List<PatientDTO> _patients = new();
    private PatientDTO patient = new();
    public bool isTableView = true;
    private string _searchString = "";
     private MudTable<PatientDTO> _table;
    private int _totalItems;
    private int _currentPage;
    private TableState _state;

    private void AddPatient()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(AddEditPatient.AddEditPatientModel), new PatientDTO { });
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, };
        _dialogService.Show<AddEditPatient>("New Patient", parameters, options);
    }

    private void SearchPatient()
    {
        Random rnd = new Random();
        int accountNo = rnd.Next();
        int caseInformationNo = rnd.Next();
        var parameters = new DialogParameters();
        parameters.Add(nameof(SearchPatientIDNumber.Search), new SearchDTO {});
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, };
        _dialogService.Show<SearchPatientIDNumber>("Search Patient", parameters, options);
    }

    private async Task InvokeModal(int id = 0)
    {
        var parameters = new DialogParameters();
        if (id != 0)
        {
            patient = _patients.FirstOrDefault(c => c.Id == id);
            if (patient != null)
            {
           parameters.Add(nameof(EditPatient.AddEditPatientModel), new PatientDTO
            {
                Id = patient.Id,
                AccountNo = patient.AccountNo,
                AdmissionDate = patient.AdmissionDate,
                BedNo = patient.BedNo,
                WardNo = patient.WardNo,
                DateOfBirth = patient.DateOfBirth,
                DependentCode = patient.DependentCode,
                Dietician = patient.Dietician,
                DischargeDate = patient.DischargeDate,
                FirstName = patient.FirstName,
                LastName = patient.LastName,
                Gender = patient.Gender,
                AuthNo = patient.AuthNo,
                CaseInformationNumber = patient.CaseInformationNumber,
                City = patient.City,
                Email = patient.Email,
                EmployerName = patient.EmployerName,
                Initials = patient.Initials,           
                Race = patient.Race,
                Language = patient.Language,
                MainMedicalAidMemberBusinessCity = patient.MainMedicalAidMemberBusinessCity,
                MainMedicalAidMemberBusinessPostalCode = patient.MainMedicalAidMemberBusinessPostalCode,
                MainMedicalAidMemberBusinessProvince = patient.MainMedicalAidMemberBusinessProvince,
                MainMedicalAidMemberBusinessStreetAddress = patient.MainMedicalAidMemberStreetAddress,
                MainMedicalAidMemberCellNo = patient.MainMedicalAidMemberCellNo,
                MainMedicalAidMemberCity = patient.MainMedicalAidMemberCity,
                MainMedicalAidMemberEmployer = patient.MainMedicalAidMemberEmployer,
                MainMedicalAidMemberFirstName = patient.MainMedicalAidMemberFirstName,
                MainMedicalAidMemberLastName = patient.MainMedicalAidMemberLastName,
                MainMedicalAidMemberIdNumber = patient.MainMedicalAidMemberIdNumber,
                MainMedicalAidMemberOccupation = patient.MainMedicalAidMemberOccupation,
                MainMedicalAidMemberPostalAddress = patient.MainMedicalAidMemberPostalAddress,
                MainMedicalAidMemberPostalAddressCode = patient.MainMedicalAidMemberPostalAddressCode,
                MainMedicalAidMemberProvince = patient.MainMedicalAidMemberProvince,
                MainMedicalAidMemberRelationship = patient.MainMedicalAidMemberRelationship,
                MainMedicalAidMemberStreetAddress = patient.MainMedicalAidMemberStreetAddress,
                MainMedicalAidMemberSuburb = patient.MainMedicalAidMemberSuburb,
                MainMedicalAidMemberTelNo = patient.MainMedicalAidMemberTelNo,
                NextOfKin = patient.NextOfKin,
                NextOfKinAltContactNo = patient.NextOfKinAltContactNo,
                NextOfKinContactNo = patient.NextOfKinContactNo,
                Occupation = patient.Occupation,
                OtherContact = patient.OtherContact,
                OtherContactNo = patient.OtherContactNo,
                OtherContactAltContactNo = patient.OtherContactAltContactNo,
                OtherContactRelationship = patient.OtherContactRelationship,
                PatientCellNo = patient.PatientCellNo,
                PatientTelNo = patient.PatientTelNo,
                PatientWorkTelNo = patient.PatientWorkTelNo,
                PoBox = patient.PoBox,
                PoBoxCode = patient.PoBoxCode,
                PostalCode = patient.PostalCode,
                Province = patient.Province,
                RelationshipOfKin = patient.RelationshipOfKin,
                StreetAddress = patient.StreetAddress,
                Suburb = patient.Suburb,
                WorkAddress = patient.WorkAddress,
                WorkAddressCity = patient.WorkAddressCity,
                WorkAddressCode = patient.WorkAddressCode,
                WorkAddressProvince = patient.WorkAddressProvince,
                WoundLocation = patient.WoundLocation,
                MedicalAidName = patient.MedicalAidName,
                MedicalAidNo = patient.MedicalAidNo,
                MedicalAidOption = patient.MedicalAidOption,
                IDNo = patient.IDNo,
                OT = patient.OT,
                Speech = patient.Speech,
                Physio = patient.Physio,
                Psych = patient.Psych,
                RefferingDoctor = patient.RefferingDoctor,
                RefferingHospital = patient.RefferingHospital,
                Title = patient.Title,
                ReportDate = patient.ReportDate,
                SocialWorker = patient.SocialWorker,
                Stage = patient.Stage
            });
            }
        }
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<EditPatient>(id == 0 ? "Create" : "Edit", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _table.ReloadServerData();
        }
    }

         public void SetViewGrid()
        {
            isTableView = false;
        }
            public void SetViewTable()
        {
            isTableView = true;
        }

    private bool Search(PatientDTO patient) => FilterFunc(patient, _searchString);

    private bool FilterFunc(PatientDTO patient, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (patient.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (patient.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (patient.WardNo.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (patient.BedNo.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (patient.RefferingDoctor.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (patient.RefferingHospital.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    private async Task GetAllPatientsAsync(TableState state)
    {
        string[] orderings = null;
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            orderings = state.SortDirection != SortDirection.None ? new[] { $"{state.SortLabel} {state.SortDirection}" } : new[] { $"{state.SortLabel}" };
        }

        var response = await patientService.GetAllPatientsTable(state.Page + 1, state.PageSize, _searchString, orderings);
        if (response.Succeeded)
        {
            _totalItems = response.TotalCount;
            _currentPage = response.CurrentPage;
            _patients = response.Data;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }

     private void OnSearch(string text)
        {
            _searchString = text;
            _table.ReloadServerData();
        }

        private async Task<TableData<PatientDTO>> ServerReload(TableState state)
        {
            if (!string.IsNullOrWhiteSpace(_searchString))
            {
                state.Page = 0;
            }
            _state = state;
            await GetAllPatientsAsync(state);
            return new TableData<PatientDTO> { TotalItems = _totalItems, Items = _patients };
        }

    protected async override Task OnInitializedAsync()
    {
        await GetAllPatients();
        admissionDate.ToString("MMMM dd");
    }

    public async Task GetAllPatients()
    {
        var patient = await patientService.GetAll();
        if (patient.Succeeded)
        {
            _patients = patient.Data;
        }
    }
}

