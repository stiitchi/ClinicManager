@using Blazored.FluentValidation
@using ClinicManager.Shared.Wrappers
@using ClinicManager.Web.Infrastructure.Services.Bed
@using ClinicManager.Web.Infrastructure.Services.Room
@using ClinicManager.Shared.DTO_s
@inject IBedService bedService 
@inject IRoomService roomService 


<EditForm Model="@AddEditBedModel" OnValidSubmit="SaveAsync">
    <MudDialog>
        <TitleContent>
            @{
            if (AddEditBedModel.BedId == 0)
            {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
                Add Bed
            </MudText>
            }
            else
            {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1" />
                Update Bed
            </MudText>
            }
            }
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" T="int" For="@(() => AddEditBedModel.BedNumber)" @bind-Value="AddEditBedModel.BedNumber" Label="Bed Number" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
        <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        <MudButton DisableElevation Variant="Variant.Outlined" ButtonType="ButtonType.Submit" Disabled="@(_processing)"  Color="Color.Success">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                @if (AddEditBedModel.BedId != 0)
                {
                    <MudText>Update</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            }
        </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public BedDTO AddEditBedModel { get; set; } = new();
    private bool _processing = false;

    public void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SaveAsync()
    {
        _processing = true;
        IResult<int> response;
 
        if (AddEditBedModel.BedId == 0)
            response = await bedService.SaveAsync(AddEditBedModel);
        else
            response = await bedService.UpdateAsync(AddEditBedModel);

        if (response.Succeeded)
        {
            if (AddEditBedModel.BedId == 0)
            {
                _snackBar.Add("New Bed Saved", Severity.Success);
                _processing = false;
            }
            else
            {
                _snackBar.Add("Bed Updated", Severity.Success);
                _processing = false;
            }
            MudDialog.Close();
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
                MudDialog.Close();
            }
        }
    }     

}