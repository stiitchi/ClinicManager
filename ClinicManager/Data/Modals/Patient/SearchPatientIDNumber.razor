@using ClinicManager.Shared.Wrappers
@using ClinicManager.Web.Infrastructure.Services.Patient
@using ClinicManager.Web.Infrastructure.Services.Bed
@using ClinicManager.Web.Infrastructure.Services.Ward
@using ClinicManager.Shared.DTO_s
@inject IPatientService patientService     
@inject IBedService bedService 
@inject IWardService wardService 

<MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-3" />
                Search Patient
            </MudText>    
        </TitleContent>
        <DialogContent>
            <MudGrid>
            <MudItem Class="mb-2" sm="12">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="IdNumber"
                     Label="ID Number" />
             </MudItem> 
            <MudItem Class="mb-2" sm="12">
                <center>
                    <MudButton Variant="Variant.Outlined" Style="border-radius:10px 10px 10px 10px"
                        Color="Color.Info" OnClick="() => SearchPatientById()">Search ID Number</MudButton>
                </center>
             </MudItem> 
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudGrid>
            @if(showMessage != false)
            {
            <MudItem Class="mb-2" sm="12">
                @if(existingId == false)
                {
               <center>
                    <MudText Typo="Typo.caption" >Patient does not exist</MudText>
                </center>              
                }          
             </MudItem> 
            }
            </MudGrid>
        </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public SearchDTO Search { get; set; } = new();
    public PatientDTO PatientModel = new();
    private List<LookupDTO> _wards = new();
    private List<LookupDTO> _beds = new();
    private bool _processing = false;
    private bool showMessage = false;
    public bool existingId = false;
    private string IdNumber;

    public async Task SearchPatientById()
    {
        var id = Convert.ToInt64(IdNumber);  
        var patient = await patientService.GetPatientByIDNumber(id);             
        if (patient.Data == null)
        {
            showMessage = true;
            existingId = false;      
        }
        else
        {
            if(patient.Data.IDNo != 0)
            {
                existingId = true;
            }
            showMessage = true;
            if (patient.Data.BedNo != 0)
            {
                var parameters = new DialogParameters();
                parameters.Add(nameof(EditPatient.AddEditPatientModel), new PatientDTO
                    {
                    Id = patient.Data.Id,
                    AccountNo = patient.Data.AccountNo,
                    AdmissionDate = patient.Data.AdmissionDate,
                    BedNo = patient.Data.BedNo,
                    WardNo = patient.Data.WardNo,
                    DateOfBirth = patient.Data.DateOfBirth,
                    DependentCode = patient.Data.DependentCode,
                    Dietician = patient.Data.Dietician,
                    DischargeDate = patient.Data.DischargeDate,
                    FirstName = patient.Data.FirstName,
                    LastName = patient.Data.LastName,
                    Gender = patient.Data.Gender,
                    AuthNo = patient.Data.AuthNo,
                    CaseInformationNumber = patient.Data.CaseInformationNumber,
                    City = patient.Data.City,
                    Email = patient.Data.Email,
                    EmployerName = patient.Data.EmployerName,
                    Initials = patient.Data.Initials,           
                    Race = patient.Data.Race,
                    Language = patient.Data.Language,
                    MainMedicalAidMemberBusinessCity = patient.Data.MainMedicalAidMemberBusinessCity,
                    MainMedicalAidMemberBusinessPostalCode = patient.Data.MainMedicalAidMemberBusinessPostalCode,
                    MainMedicalAidMemberBusinessProvince = patient.Data.MainMedicalAidMemberBusinessProvince,
                    MainMedicalAidMemberBusinessStreetAddress = patient.Data.MainMedicalAidMemberStreetAddress,
                    MainMedicalAidMemberCellNo = patient.Data.MainMedicalAidMemberCellNo,
                    MainMedicalAidMemberCity = patient.Data.MainMedicalAidMemberCity,
                    MainMedicalAidMemberEmployer = patient.Data.MainMedicalAidMemberEmployer,
                    MainMedicalAidMemberFirstName = patient.Data.MainMedicalAidMemberFirstName,
                    MainMedicalAidMemberLastName = patient.Data.MainMedicalAidMemberLastName,
                    MainMedicalAidMemberIdNumber = patient.Data.MainMedicalAidMemberIdNumber,
                    MainMedicalAidMemberOccupation = patient.Data.MainMedicalAidMemberOccupation,
                    MainMedicalAidMemberPostalAddress = patient.Data.MainMedicalAidMemberPostalAddress,
                    MainMedicalAidMemberPostalAddressCode = patient.Data.MainMedicalAidMemberPostalAddressCode,
                    MainMedicalAidMemberProvince = patient.Data.MainMedicalAidMemberProvince,
                    MainMedicalAidMemberRelationship = patient.Data.MainMedicalAidMemberRelationship,
                    MainMedicalAidMemberStreetAddress = patient.Data.MainMedicalAidMemberStreetAddress,
                    MainMedicalAidMemberSuburb = patient.Data.MainMedicalAidMemberSuburb,
                    MainMedicalAidMemberTelNo = patient.Data.MainMedicalAidMemberTelNo,
                    NextOfKin = patient.Data.NextOfKin,
                    NextOfKinAltContactNo = patient.Data.NextOfKinAltContactNo,
                    NextOfKinContactNo = patient.Data.NextOfKinContactNo,
                    Occupation = patient.Data.Occupation,
                    OtherContact = patient.Data.OtherContact,
                    OtherContactNo = patient.Data.OtherContactNo,
                    OtherContactAltContactNo = patient.Data.OtherContactAltContactNo,
                    OtherContactRelationship = patient.Data.OtherContactRelationship,
                    PatientCellNo = patient.Data.PatientCellNo,
                    PatientTelNo = patient.Data.PatientTelNo,
                    PatientWorkTelNo = patient.Data.PatientWorkTelNo,
                    PoBox = patient.Data.PoBox,
                    PoBoxCode = patient.Data.PoBoxCode,
                    PostalCode = patient.Data.PostalCode,
                    Province = patient.Data.Province,
                    RelationshipOfKin = patient.Data.RelationshipOfKin,
                    StreetAddress = patient.Data.StreetAddress,
                    Suburb = patient.Data.Suburb,
                    WorkAddress = patient.Data.WorkAddress,
                    WorkAddressCity = patient.Data.WorkAddressCity,
                    WorkAddressCode = patient.Data.WorkAddressCode,
                    WorkAddressProvince = patient.Data.WorkAddressProvince,
                    WoundLocation = patient.Data.WoundLocation,
                    MedicalAidName = patient.Data.MedicalAidName,
                    MedicalAidNo = patient.Data.MedicalAidNo,
                    MedicalAidOption = patient.Data.MedicalAidOption,
                    IDNo = patient.Data.IDNo,
                    OT = patient.Data.OT,
                    Speech = patient.Data.Speech,
                    Physio = patient.Data.Physio,
                    Psych = patient.Data.Psych,
                    RefferingDoctor = patient.Data.RefferingDoctor,
                    RefferingHospital = patient.Data.RefferingHospital,
                    Title = patient.Data.Title,
                    ReportDate = patient.Data.ReportDate,
                    SocialWorker = patient.Data.SocialWorker,
                    Stage = patient.Data.Stage
                    });
                    MudDialog.Close();
                var patientName = $" Patient - {patient.Data.FirstName} {patient.Data.LastName}";
                var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, };
                _dialogService.Show<EditPatient>(patientName, parameters, options);
            }
        }
    }
}
