@using ClinicManager.Data.Modals.Wards
@using ClinicManager.Web.Infrastructure.Services.Ward
@using ClinicManager.Web.Infrastructure.Services.Bed
@using ClinicManager.Shared.DTO_s
@using Skye.Web.Shared.Dialogs
@inject IWardService wardService 
@inject IBedService bedService 

                       
<MudDialog Style="width:400px;">
    <DialogContent>
    <MudGrid>
@if(_beds.Count() > 0)
    {
        @foreach(var bed in _beds)
        {
        <MudItem xs="3" md="3" sm="3">
                <MudCard Elevation="5" Style="border-radius:10px 10px 10px 10px">
                    <MudCardHeader>
                    <CardHeaderContent>
                         <center>
                        <MudIcon Icon="@Icons.Filled.Bed"/> <br/>
                        @bed.BedNumber
                        </center>
                    </CardHeaderContent>
                    </MudCardHeader>
                </MudCard>
        </MudItem>          
        }
}
else
{
                
    <MudText Align="Align.Center" Typo="Typo.body1">No Beds Available</MudText>
}

        </MudGrid>
   </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Info"
                               @onclick="@(() => GetAllBedsByWardId(Ward.WardId))"
                               Style="border-radius:10px 10px 10px 10px; width:150px">All</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                               @onclick="@(() => GetAllOccupiedBedsByWardId(Ward.WardId))"
                               Style="border-radius:10px 10px 10px 10px; width:150px">Occupied</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Success"
                               Style="border-radius:10px 10px 10px 10px; width:150px"
                               @onclick="@(() => GetAllUnoccupiedBedsByWardId(Ward.WardId))"
                               >Unoccupied</MudButton>

    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private List<WardDTO> _wards = new();
    private List<BedDTO> _beds = new();
    [Parameter] public WardDTO Ward { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetAllWards();
        await GetAllBedsByWardId(Ward.WardId);
    }

    public async Task GetAllWards()
    {
        var wards = await wardService.GetAll();
        if (wards.Succeeded)
        {
            _wards = wards.Data;
        }
    }

    public async Task GetAllOccupiedBedsByWardId(int wardId)
    {
        var beds = await bedService.GetAllOccupiedBedsByWardId(wardId);
        if (beds.Succeeded)
        {
            _beds = beds.Data;
        }
    }

     public async Task GetAllUnoccupiedBedsByWardId(int wardId)
    {
        var beds = await bedService.GetAllUnoccupiedBedsByWardId(wardId);
        if (beds.Succeeded)
        {
            _beds = beds.Data;
        }
    }

    public async Task GetAllBedsByWardId(int wardId)
    {
        var beds = await bedService.GetAllBedsByWardId(wardId);
        if (beds.Succeeded)
        {
            _beds = beds.Data;
        }
    }
}
