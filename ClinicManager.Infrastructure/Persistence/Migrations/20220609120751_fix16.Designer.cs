// <auto-generated />
using System;
using ClinicManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManager.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220609120751_fix16")]
    partial class fix16
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClinicManager.Domain.Entities.AdmissionAggregate.AdmissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountNo")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AdmissionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AltContactNoKin")
                        .HasColumnType("int");

                    b.Property<string>("AuthNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseInformationNo")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<int>("CellNo")
                        .HasColumnType("int");

                    b.Property<int>("ContactNoKin")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DependentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTelNo")
                        .HasColumnType("int");

                    b.Property<int>("IDNo")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicalAidMemberBusinessAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberBusinessPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalAidMemberCellNo")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidMemberEmployer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberHomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberHomePostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalAidMemberIdNo")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidMemberOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberPostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberPostalAddressCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberRelationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalAidMemberTelNo")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OtherContactNo")
                        .HasColumnType("int");

                    b.Property<int>("OtherContactNoAlt")
                        .HasColumnType("int");

                    b.Property<string>("OtherContactRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoBoxCode")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipOfKin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkAddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkTelNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Admissions", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.BedAggregate.BedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.Property<string>("WardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("WardId");

                    b.ToTable("Beds", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.DayFeesAggregate.DayFeesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayFeeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayFeeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("DayFees", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.ICDCodeAggregate.ICDCodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("ICDCodes", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.DailyCareRecordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CareRecord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("DailyCareRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.FluidBalanceRecordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IntravenousIntakeCompleteVolume")
                        .HasColumnType("int");

                    b.Property<int>("IntravenousIntakeMl")
                        .HasColumnType("int");

                    b.Property<int>("IntravenousIntakeStartVolume")
                        .HasColumnType("int");

                    b.Property<DateTime>("IntravenousIntakeTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IntravenousIntakeTimeCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntravenousRunningTotal")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrine")
                        .HasColumnType("bit");

                    b.Property<bool>("IvCheck")
                        .HasColumnType("bit");

                    b.Property<string>("IvCheckType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IvDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OralCheckType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OralIntakeMl")
                        .HasColumnType("int");

                    b.Property<DateTime>("OralIntakeTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OralIntakeVolume")
                        .HasColumnType("int");

                    b.Property<int>("OutputMl")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Previous24HourIntake")
                        .HasColumnType("int");

                    b.Property<int>("Previous24HourOutput")
                        .HasColumnType("int");

                    b.Property<int>("Total24HourIntake")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("FluidBalanceRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanComfortSleepEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PainControlFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PainControlSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PainControlTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ComfortSleepRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanEliminationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CathetherFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CathetherSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CathetherTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContinentFrequency")
                        .HasColumnType("int");

                    b.Property<string>("ContinentSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContinentTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("EliminationRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanFluidsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CheckIVSiteFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CheckIVSiteSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CheckIVSiteTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("IvTestFrequency")
                        .HasColumnType("int");

                    b.Property<string>("IvTestSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("IvTestTime")
                        .HasColumnType("time");

                    b.Property<int>("MonitorFluidFrequency")
                        .HasColumnType("int");

                    b.Property<string>("MonitorFluidSignatures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("MonitorFluidTime")
                        .HasColumnType("time");

                    b.Property<int>("OralTestFrequency")
                        .HasColumnType("int");

                    b.Property<string>("OralTestSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OralTestTime")
                        .HasColumnType("time");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TubeTestFrequency")
                        .HasColumnType("int");

                    b.Property<string>("TubeTestSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TubeTestTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("CarePlanFluids", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanHygieneEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BedBathAssistFrequency")
                        .HasColumnType("int");

                    b.Property<string>("BedBathAssistSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BedBathAssistTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BedBathFrequency")
                        .HasColumnType("int");

                    b.Property<string>("BedBathSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BedBathTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("SelfCareFrequency")
                        .HasColumnType("int");

                    b.Property<string>("SelfCareSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SelfCareTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("HygieneRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanInterventionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("IsolationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("IsolationSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IsolationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("MedicationSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MedicationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PostOperativeCareFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PostOperativeCareSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostOperativeCareTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TractionFrequency")
                        .HasColumnType("int");

                    b.Property<string>("TractionSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TractionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WoundCareFrequency")
                        .HasColumnType("int");

                    b.Property<string>("WoundCareSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WoundCareTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("InterventionRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanMobilityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssistIntoChairFrequency")
                        .HasColumnType("int");

                    b.Property<string>("AssistIntoChairSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssistIntoChairTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BedRestFrequency")
                        .HasColumnType("int");

                    b.Property<string>("BedRestSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BedRestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExercisesFrequency")
                        .HasColumnType("int");

                    b.Property<string>("ExercisesSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExercisesTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MobileImmobileFrequency")
                        .HasColumnType("int");

                    b.Property<string>("MobileImmobileSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MobileImmobileTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("WalkWithAssistanceFrequency")
                        .HasColumnType("int");

                    b.Property<string>("WalkWithAssistanceSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WalkWithAssistanceTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MobilityRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanNutritionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FullWardDietFrequency")
                        .HasColumnType("int");

                    b.Property<string>("FullWardDietSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FullWardDietTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("KeepNPOFrequency")
                        .HasColumnType("int");

                    b.Property<string>("KeepNPOSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("KeepNPOTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialFrequency")
                        .HasColumnType("int");

                    b.Property<string>("SpecialSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SpecialTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("NutritionRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanObservationsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BloodFrequency")
                        .HasColumnType("int");

                    b.Property<int>("BloodGlucoseFrequency")
                        .HasColumnType("int");

                    b.Property<string>("BloodGlucoseSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BloodGlucoseTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BloodTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NeuroLogicalFrequency")
                        .HasColumnType("int");

                    b.Property<string>("NeuroLogicalSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NeuroLogicalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NeuroVascularFrequency")
                        .HasColumnType("int");

                    b.Property<string>("NeuroVascularSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NeuroVascularTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("UrineTestFrequency")
                        .HasColumnType("int");

                    b.Property<string>("UrineTestSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UrineTestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("VitalSignSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VitalSignsFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("VitalSignsTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ObservationRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanOxygenationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InhalaNebsFrequency")
                        .HasColumnType("int");

                    b.Property<string>("InhalaNebsSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InhalaNebsTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaskFrequency")
                        .HasColumnType("int");

                    b.Property<string>("MaskSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MaskTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NasalCannulaFrequency")
                        .HasColumnType("int");

                    b.Property<string>("NasalCannulaSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NasalCannulaTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PolyMaskFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PolyMaskSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PolyMaskTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("OxygenationRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanPsychologicalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommunicationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommunicationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthEducationFrequency")
                        .HasColumnType("int");

                    b.Property<string>("HealthEducationSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HealthEducationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("SupportFrequency")
                        .HasColumnType("int");

                    b.Property<string>("SupportSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SupportTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PsychologicalRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanSafetyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CheckIDBandsFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CheckIDBandsSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckIDBandsTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CotsidesFrequency")
                        .HasColumnType("int");

                    b.Property<string>("CotsidesSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CotsidesTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SafetyRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanSkinIntegrityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PressurePartCareFrequency")
                        .HasColumnType("int");

                    b.Property<string>("PressurePartCareSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PressurePartCareTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportRednessFrequency")
                        .HasColumnType("int");

                    b.Property<string>("ReportRednessSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportRednessTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SkinIntegrityReportRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AdmissionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AltContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AltContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AltContactRelationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseInformationNo")
                        .HasColumnType("int");

                    b.Property<int>("CellNo")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DependentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IDNo")
                        .HasColumnType("int");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberBusinessAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberBusinessPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberCellNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberEmployer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberIdNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberPostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidMemberTelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoBox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoBoxCode")
                        .HasColumnType("int");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipOfKin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkAddressPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkTelNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Patients", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.PatientProgressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Allergy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("RiskFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ProgressReportRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.SkinIntegrityReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HipsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("SacrumDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SkinReportRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.StoolChartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Blood")
                        .HasColumnType("bit");

                    b.Property<string>("BowelAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Consistency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MucousAmount")
                        .HasColumnType("int");

                    b.Property<bool>("NormalBowelHabit")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StoolChartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StoolChartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoolColour")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("StoolReportRecords", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.UserAggregate.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.UserAggregate.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActivationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Id");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.UserAggregate.UserRolesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.WardAggregate.WardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("TotalBeds")
                        .HasColumnType("int");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<int>("WardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Wards", "dbo");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.BedAggregate.BedEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.UserAggregate.UserEntity", "Nurse")
                        .WithMany("Beds")
                        .HasForeignKey("NurseId");

                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("Beds")
                        .HasForeignKey("PatientId");

                    b.HasOne("ClinicManager.Domain.Entities.WardAggregate.WardEntity", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.DayFeesAggregate.DayFeesEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", null)
                        .WithMany("DayFees")
                        .HasForeignKey("PatientEntityId");

                    b.HasOne("ClinicManager.Domain.Entities.UserAggregate.UserEntity", null)
                        .WithMany("DayFees")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.ICDCodeAggregate.ICDCodeEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", null)
                        .WithMany("IcdCodes")
                        .HasForeignKey("PatientEntityId");

                    b.HasOne("ClinicManager.Domain.Entities.UserAggregate.UserEntity", null)
                        .WithMany("ICDCodes")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.DailyCareRecordEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("DailyCareRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.FluidBalanceRecordEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("FluidBalanceRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanComfortSleepEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("ComfortSleepRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanEliminationEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("EliminationRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanFluidsEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("FluidRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanHygieneEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("HygieneRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanInterventionEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("InterventionRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanMobilityEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("MobilityRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanNutritionEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("NutritionRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanObservationsEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("ObservationRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanOxygenationEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("OxygenationRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanPsychologicalEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("PsychologicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanSafetyEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("SafetyRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.NurseCarePlanSkinIntegrityEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("CareplanSkinIntegrityRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.PatientProgressEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("ProgressReportRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.SkinIntegrityReport", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("SkinIntegrityReportRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.StoolChartEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", "Patient")
                        .WithMany("StoolReportRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.UserAggregate.UserRolesEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.UserAggregate.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManager.Domain.Entities.UserAggregate.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.WardAggregate.WardEntity", b =>
                {
                    b.HasOne("ClinicManager.Domain.Entities.UserAggregate.UserEntity", null)
                        .WithMany("Wards")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.PatientAggregate.PatientEntity", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("CareplanSkinIntegrityRecords");

                    b.Navigation("ComfortSleepRecords");

                    b.Navigation("DailyCareRecords");

                    b.Navigation("DayFees");

                    b.Navigation("EliminationRecords");

                    b.Navigation("FluidBalanceRecords");

                    b.Navigation("FluidRecords");

                    b.Navigation("HygieneRecords");

                    b.Navigation("IcdCodes");

                    b.Navigation("InterventionRecords");

                    b.Navigation("MobilityRecords");

                    b.Navigation("NutritionRecords");

                    b.Navigation("ObservationRecords");

                    b.Navigation("OxygenationRecords");

                    b.Navigation("ProgressReportRecords");

                    b.Navigation("PsychologicalRecords");

                    b.Navigation("SafetyRecords");

                    b.Navigation("SkinIntegrityReportRecords");

                    b.Navigation("StoolReportRecords");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.UserAggregate.UserEntity", b =>
                {
                    b.Navigation("Beds");

                    b.Navigation("DayFees");

                    b.Navigation("ICDCodes");

                    b.Navigation("UserRoles");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("ClinicManager.Domain.Entities.WardAggregate.WardEntity", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
